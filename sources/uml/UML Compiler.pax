| package |
package := Package name: 'UML Compiler'.
package paxVersion: 1;
	basicComment: ''.

package basicPackageVersion: '1.05'.


package classNames
	add: #UMLBlockClosureNode;
	add: #UMLCompilationBranch;
	add: #UMLCompilationError;
	add: #UMLCompiler;
	add: #UMLImplementation;
	add: #UMLParsedImplementation;
	add: #UMLSanityCheck;
	add: #UMLTreeVisitor;
	yourself.

package methodNames
	add: #StAssignmentNode -> #getUMLObjectFrom:;
	add: #StAssignmentNode -> #hasSelector;
	add: #StAssignmentNode -> #hasUMLBlock;
	add: #StAssignmentNode -> #isSuperSend;
	add: #StAssignmentNode -> #nodes;
	add: #StAssignmentNode -> #processInsideSnapshot:context:parameters:;
	add: #StAssignmentNode -> #receiverName;
	add: #StAssignmentNode -> #selector;
	add: #StAssignmentNode -> #variableName;
	add: #StBlockNode -> #isSuperSend;
	add: #StBlockNode -> #name;
	add: #StBlockNode -> #nodes;
	add: #StBlockNode -> #printParsedCode;
	add: #StBlockNode -> #processInsideSnapshot:context:parameters:;
	add: #StCascadeNode -> #nodes;
	add: #StCascadeNode -> #processInsideSnapshot:context:parameters:;
	add: #StIdentifierToken -> #getUMLObjectFrom:;
	add: #StLiteralArrayNode -> #asUMLObject;
	add: #StLiteralArrayNode -> #asUMLObject:;
	add: #StLiteralArrayNode -> #getUMLObjectFrom:;
	add: #StLiteralArrayNode -> #name;
	add: #StLiteralArrayNode -> #processInsideSnapshot:context:parameters:;
	add: #StLiteralNode -> #asUMLObject:;
	add: #StLiteralNode -> #nodes;
	add: #StLiteralToken -> #asUMLObject:;
	add: #StLiteralValueNode -> #arguments;
	add: #StLiteralValueNode -> #asUMLObject:;
	add: #StLiteralValueNode -> #getUMLObjectFrom:;
	add: #StLiteralValueNode -> #isSuperSend;
	add: #StLiteralValueNode -> #name;
	add: #StLiteralValueNode -> #processInsideSnapshot:context:parameters:;
	add: #StLiteralValueNode -> #receiverName;
	add: #StMessageNode -> #argumentsName;
	add: #StMessageNode -> #getUMLObjectFrom:;
	add: #StMessageNode -> #isSuperSend;
	add: #StMessageNode -> #nodes;
	add: #StMessageNode -> #printParsedCode;
	add: #StMessageNode -> #processInsideSnapshot:context:parameters:;
	add: #StMessageNode -> #receiverName;
	add: #StMethodNode -> #allNodes;
	add: #StMethodNode -> #hasReferenceTo:;
	add: #StMethodNode -> #nodes;
	add: #StNumberLiteralToken -> #asUMLObject:;
	add: #StPrimitiveNode -> #isPrimitive;
	add: #StPrimitiveNode -> #processInsideSnapshot:context:parameters:;
	add: #StProgramNode -> #isPrimitive;
	add: #StProgramNode -> #isTrait;
	add: #StProgramNode -> #isVirtualMachineImplementation;
	add: #StProgramNode -> #printMessage;
	add: #StReturnNode -> #arguments;
	add: #StReturnNode -> #hasSelector;
	add: #StReturnNode -> #isSuperSend;
	add: #StReturnNode -> #nodes;
	add: #StReturnNode -> #processInsideSnapshot:context:parameters:;
	add: #StReturnNode -> #receiverName;
	add: #StReturnNode -> #selector;
	add: #StSequenceNode -> #nodes;
	add: #StSequenceNode -> #printMessage;
	add: #StTagNode -> #isSuperSend;
	add: #StVariableNode -> #arguments;
	add: #StVariableNode -> #asUMLObject:;
	add: #StVariableNode -> #getUMLObjectFrom:;
	add: #StVariableNode -> #isSuperSend;
	add: #StVariableNode -> #nodes;
	add: #StVariableNode -> #processInsideSnapshot:context:parameters:;
	add: #StVariableNode -> #receiverName;
	add: #UMLClass -> #appendBooleanAttributesOn:;
	add: #UMLClass -> #appendClassSelfReferencesOn:;
	add: #UMLClass -> #appendDateAttributesOn:;
	add: #UMLClass -> #appendNtoXrelationsOn:;
	add: #UMLClass -> #appendNumberAttributesOn:;
	add: #UMLClass -> #appendOneToOneRelationsOn:overflowCollection:;
	add: #UMLClass -> #appendStringAttributesOn:;
	add: #UMLClass -> #appendSuperInitializeOn:;
	add: #UMLClass -> #appendTimeAttributesOn:;
	add: #UMLClass -> #appendTimeStampAttributesOn:;
	add: #UMLClass -> #autoGenerateInitializeMethodIn:;
	add: #UMLClass -> #autoGenerateInitializeMethodIn:overflowCollection:;
	add: #UMLClass -> #createClassAccessorsForGlobalObject:using:;
	add: #UMLClass -> #createClassAccessorsForGlobalObjectsUsing:;
	add: #UMLClass -> #createClassCreationMethodForGlobalObject:using:;
	add: #UMLClass -> #createClassCreationMethodsForGlobalObjectsUsing:;
	add: #UMLClass -> #createClassDBAccessorsForGlobalObjectsUsing:;
	add: #UMLClass -> #createClassDBCreationMethodsForGlobalObjectsUsing:;
	add: #UMLClass -> #createUMLAccessorsSourceFor:using:;
	add: #UMLClass -> #createUMLCreationSourceFor:using:;
	add: #UMLClass -> #createUMLDBAccessorsSourceFor:using:;
	add: #UMLClass -> #createUMLDBCreationSourceFor:using:;
	add: #UMLClass -> #createUMLDBSourceForCreateAllInstancesWith:;
	add: #UMLClass -> #createUMLSourceForCreateAllInstancesWith:;
	add: #UMLObject -> #umlCompiler;
	add: 'StProgramNode class' -> #icon;
	add: 'UMLObject class' -> #umlCompiler;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\..\Core\Object Arts\Dolphin\IDE\Base\Development System';
	add: '..\..\Core\Object Arts\Dolphin\Base\Dolphin';
	add: '..\..\Core\Object Arts\Dolphin\MVP\Base\Dolphin MVP Base';
	add: '..\..\Core\Object Arts\Dolphin\MVP\Models\Tree\Dolphin Tree Models';
	add: '..\..\Core\Object Arts\Dolphin\System\Compiler\Smalltalk Parser';
	add: 'UML Basic Support';
	yourself).

package!

"Class Definitions"!

StParseNodeVisitor subclass: #UMLTreeVisitor
	instanceVariableNames: 'treeModel'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
UMLObject subclass: #UMLBlockClosureNode
	instanceVariableNames: 'arguments sequenceNode selfObject snapshot umlInstance isReEntrant snapshots reEntrantVarName'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
UMLObject subclass: #UMLCompiler
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
UMLObject subclass: #UMLSanityCheck
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
UMLBehaviorDescriptor subclass: #UMLImplementation
	instanceVariableNames: 'methodName methodClass'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
UMLImplementation subclass: #UMLParsedImplementation
	instanceVariableNames: 'parsedCode hideShowMessage hasCompilationFailure'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
UMLSanityCheck subclass: #UMLCompilationBranch
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
UMLSanityCheck subclass: #UMLCompilationError
	instanceVariableNames: 'node'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!StAssignmentNode methodsFor!

getUMLObjectFrom: anUMLExecutionSnapshot 

	value isLiteralNode ifTrue: [^value asUMLObject: anUMLExecutionSnapshot  virtualMachine].

	value isCascade ifFalse: [^anUMLExecutionSnapshot  getObjectNamed: value receiverName].

	^anUMLExecutionSnapshot  cascadeTemporaries at: value!

hasSelector

	^value isMessage!

hasUMLBlock
	^value isBlock!

isSuperSend
	^value isSuperSend!

nodes

	^OrderedCollection with: self
!

processInsideSnapshot: anUMLExecutionSnapshot context: anUMLObject parameters: anArray 

	^anUMLExecutionSnapshot processAssignment: self messageReceiver: anUMLObject arguments: anArray!

receiverName
	^value receiverName!

selector
	^value selector!

variableName

	^variable name! !
!StAssignmentNode categoriesFor: #getUMLObjectFrom:!public! !
!StAssignmentNode categoriesFor: #hasSelector!public! !
!StAssignmentNode categoriesFor: #hasUMLBlock!public! !
!StAssignmentNode categoriesFor: #isSuperSend!public! !
!StAssignmentNode categoriesFor: #nodes!public! !
!StAssignmentNode categoriesFor: #processInsideSnapshot:context:parameters:!public! !
!StAssignmentNode categoriesFor: #receiverName!public! !
!StAssignmentNode categoriesFor: #selector!public! !
!StAssignmentNode categoriesFor: #variableName!public! !

!StBlockNode methodsFor!

isSuperSend
	^false!

name
	^self formattedCode!

nodes

	^body statements!

printParsedCode
	^self source!

processInsideSnapshot: anUMLExecutionSnapshot context: anUMLObject parameters: anArray 
	| block |

	block := anUMLExecutionSnapshot createBlockFrom: self.
	^block vmPerform: #value! !
!StBlockNode categoriesFor: #isSuperSend!public! !
!StBlockNode categoriesFor: #name!public! !
!StBlockNode categoriesFor: #nodes!public! !
!StBlockNode categoriesFor: #printParsedCode!public! !
!StBlockNode categoriesFor: #processInsideSnapshot:context:parameters:!public! !

!StCascadeNode methodsFor!

nodes

	^messages!

processInsideSnapshot: anUMLExecutionSnapshot context: anUMLObject parameters: anArray 

	^anUMLExecutionSnapshot processCascadeNode: self  context: anUMLObject parameteres: anArray! !
!StCascadeNode categoriesFor: #nodes!public! !
!StCascadeNode categoriesFor: #processInsideSnapshot:context:parameters:!public! !

!StIdentifierToken methodsFor!

getUMLObjectFrom: anUMLExecutionSnapshot 

	^anUMLExecutionSnapshot getObjectNamed: value! !
!StIdentifierToken categoriesFor: #getUMLObjectFrom:!public! !

!StLiteralArrayNode methodsFor!

asUMLObject

	^(contents collect: [:each | each name asUMLObject: self defaultVirtualMachine]) asUMLObject: self defaultVirtualMachine
!

asUMLObject: anUMLVirtualMachine 
	^(contents collect: [:each | each asUMLObject: anUMLVirtualMachine]) asUMLObject: anUMLVirtualMachine !

getUMLObjectFrom: anUMLExecutionSnapshot 

	^self asUMLObject: anUMLExecutionSnapshot virtualMachine!

name
	^self asUMLObject!

processInsideSnapshot: anUMLExecutionSnapshot context: anUMLObject parameters: anArray 

	^self asUMLObject
! !
!StLiteralArrayNode categoriesFor: #asUMLObject!public! !
!StLiteralArrayNode categoriesFor: #asUMLObject:!public! !
!StLiteralArrayNode categoriesFor: #getUMLObjectFrom:!public! !
!StLiteralArrayNode categoriesFor: #name!public! !
!StLiteralArrayNode categoriesFor: #processInsideSnapshot:context:parameters:!public! !

!StLiteralNode methodsFor!

asUMLObject: anUMLVirtualMachine 
!

nodes

	^OrderedCollection with: self

! !
!StLiteralNode categoriesFor: #asUMLObject:!public! !
!StLiteralNode categoriesFor: #nodes!public! !

!StLiteralToken methodsFor!

asUMLObject: anUMLVirtualMachine 

	^value asUMLObject: anUMLVirtualMachine ! !
!StLiteralToken categoriesFor: #asUMLObject:!public! !

!StLiteralValueNode methodsFor!

arguments
	^#()!

asUMLObject: anUMLVirtualMachine 

	^token asUMLObject: anUMLVirtualMachine !

getUMLObjectFrom: anUMLExecutionSnapshot 

	^anUMLExecutionSnapshot getBasicObjectNamed: self name!

isSuperSend
	^false!

name
	^self value!

processInsideSnapshot: anUMLExecutionSnapshot context: anUMLInstance parameters: anArray 

	^anUMLExecutionSnapshot processLiteralNode: self context: anUMLInstance parameters: anArray!

receiverName
	^token value! !
!StLiteralValueNode categoriesFor: #arguments!public! !
!StLiteralValueNode categoriesFor: #asUMLObject:!public! !
!StLiteralValueNode categoriesFor: #getUMLObjectFrom:!public! !
!StLiteralValueNode categoriesFor: #isSuperSend!public! !
!StLiteralValueNode categoriesFor: #name!public! !
!StLiteralValueNode categoriesFor: #processInsideSnapshot:context:parameters:!public! !
!StLiteralValueNode categoriesFor: #receiverName!public! !

!StMessageNode methodsFor!

argumentsName

	^(self arguments collect: [:each | each receiverName]) asArray!

getUMLObjectFrom: anUMLExecutionSnapshot  

	(receiver isBlock) ifTrue: [^anUMLExecutionSnapshot  createBlockFrom: receiver].

	self receiver isLiteralNode ifTrue: [^self receiver value asUMLObject: anUMLExecutionSnapshot  virtualMachine].

	^anUMLExecutionSnapshot getObjectNamed: self receiverName!

isSuperSend

	^self receiverName = 'super'!

nodes

	^OrderedCollection with: self!

printParsedCode
	^self formattedCode!

processInsideSnapshot: anUMLExecutionSnapshot context: anUMLObject parameters: anArray

	^anUMLExecutionSnapshot processMessageNode: self messageReceiver: anUMLObject arguments: anArray
	!

receiverName
	| receiverObject |

	receiverObject := receiver.
"this is because <aStMessage> has as receiver  another <aStMessage> "
	[receiverObject class == StMessageNode] whileTrue: [receiverObject := receiverObject receiver].
	^receiverObject name ! !
!StMessageNode categoriesFor: #argumentsName!public! !
!StMessageNode categoriesFor: #getUMLObjectFrom:!public! !
!StMessageNode categoriesFor: #isSuperSend!public!smalltalk parser! !
!StMessageNode categoriesFor: #nodes!public! !
!StMessageNode categoriesFor: #printParsedCode!public! !
!StMessageNode categoriesFor: #processInsideSnapshot:context:parameters:!public! !
!StMessageNode categoriesFor: #receiverName!public! !

!StMethodNode methodsFor!

allNodes
	| all |

	tag ifNotNil: [:value | ^OrderedCollection with: tag].

	all := OrderedCollection new.
	body nodesDo: [:eachStProgramNode | all add: eachStProgramNode].

	^all allButFirst!

hasReferenceTo: aSymbol 

	self halt

!

nodes

	^body statements! !
!StMethodNode categoriesFor: #allNodes!public! !
!StMethodNode categoriesFor: #hasReferenceTo:!public! !
!StMethodNode categoriesFor: #nodes!public! !

!StNumberLiteralToken methodsFor!

asUMLObject: anUMLVirtualMachine 

	^source asNumber asUMLObject: anUMLVirtualMachine! !
!StNumberLiteralToken categoriesFor: #asUMLObject:!public! !

!StPrimitiveNode methodsFor!

isPrimitive

	^true!

processInsideSnapshot: anUMLExecutionSnapshot context: anUMLInstance parameters: anArray 

	^anUMLExecutionSnapshot processPrimitiveCall: primitiveIndex receiver: anUMLInstance withArguments: anArray! !
!StPrimitiveNode categoriesFor: #isPrimitive!public! !
!StPrimitiveNode categoriesFor: #processInsideSnapshot:context:parameters:!public! !

!StProgramNode methodsFor!

isPrimitive

	^false!

isTrait
	^false!

isVirtualMachineImplementation
	^false!

printMessage
	^self formattedCode! !
!StProgramNode categoriesFor: #isPrimitive!public! !
!StProgramNode categoriesFor: #isTrait!public! !
!StProgramNode categoriesFor: #isVirtualMachineImplementation!public! !
!StProgramNode categoriesFor: #printMessage!public! !

!StProgramNode class methodsFor!

icon

	^Icon fromId: 'TranscriptShell.ico'! !
!StProgramNode class categoriesFor: #icon!public! !

!StReturnNode methodsFor!

arguments
	^value arguments!

hasSelector
	^false!

isSuperSend
	^false!

nodes
	^OrderedCollection with: self!

processInsideSnapshot: anUMLExecutionSnapshot context: anUMLObject parameters: anArray 

	^anUMLExecutionSnapshot processReturnNode: self messageReceiver: anUMLObject arguments: anArray!

receiverName
	^value receiverName!

selector
	^value selector! !
!StReturnNode categoriesFor: #arguments!public! !
!StReturnNode categoriesFor: #hasSelector!public! !
!StReturnNode categoriesFor: #isSuperSend!public! !
!StReturnNode categoriesFor: #nodes!public! !
!StReturnNode categoriesFor: #processInsideSnapshot:context:parameters:!public! !
!StReturnNode categoriesFor: #receiverName!public! !
!StReturnNode categoriesFor: #selector!public! !

!StSequenceNode methodsFor!

nodes
	^statements!

printMessage
	^self source! !
!StSequenceNode categoriesFor: #nodes!public! !
!StSequenceNode categoriesFor: #printMessage!public! !

!StTagNode methodsFor!

isSuperSend
	^false! !
!StTagNode categoriesFor: #isSuperSend!public! !

!StVariableNode methodsFor!

arguments
	^OrderedCollection new!

asUMLObject: anUMLVirtualMachine 
	^Error notYetImplemented!

getUMLObjectFrom: anUMLExecutionSnapshot 

	^anUMLExecutionSnapshot getObjectNamed: self name!

isSuperSend
	^false!

nodes

	^OrderedCollection with: self!

processInsideSnapshot: anUMLExecutionSnapshot context: anUMLObject parameters: anArray 

	(self defaultVirtualMachine getAnyClassNamed: self name) ifNotNil: [:vmOrUmlClass | ^vmOrUmlClass].

	^(anUMLObject hasVariableNamed: self name) 
	ifTrue: [anUMLObject atVariableName: self name]
	ifFalse: [^(anUMLExecutionSnapshot getArgumentOrTemporaryNamed: self name) asUMLObject: self defaultVirtualMachine].!

receiverName

	^self name! !
!StVariableNode categoriesFor: #arguments!public! !
!StVariableNode categoriesFor: #asUMLObject:!public! !
!StVariableNode categoriesFor: #getUMLObjectFrom:!public! !
!StVariableNode categoriesFor: #isSuperSend!public! !
!StVariableNode categoriesFor: #nodes!public! !
!StVariableNode categoriesFor: #processInsideSnapshot:context:parameters:!public! !
!StVariableNode categoriesFor: #receiverName!public! !

!UMLClass methodsFor!

appendBooleanAttributesOn: aWriteStream
	"The receiver append instances variables of boolean values to method code <aWriteStream>"

	(self attributes select: [:each | #('Boolean' 'True' 'False') includes: each type name]) asOrderedCollection do: [:each | 
		aWriteStream nextPutAll: each getName,' := false.', String lineDelimiter. "instances variables assigment for booleans"
	].!

appendClassSelfReferencesOn: aWriteStream


	"Classes with self references"
	(self relations select: [:each | each isSelfReferenceClass]) do: [:eachRelation | | bothAttributes sourceAttribute targetAttribute  |
		bothAttributes := ((self attributes select: [:each | each isSelfReferenceAttribute]) select: [:each | each relation == each relation]) asOrderedCollection.
		sourceAttribute := bothAttributes first.
		targetAttribute := bothAttributes last.
		eachRelation isTargetNavigable
		ifTrue: [
			eachRelation sourceMultiplicity hasMultipleInstances
			ifTrue: [aWriteStream nextPutAll: sourceAttribute getName,' := OrderedCollection new.', String lineDelimiter] 
			ifFalse: [aWriteStream nextPutAll: sourceAttribute getName,' := ', (sourceAttribute getInitializeTypeFor: self) name, ' new.', String lineDelimiter].].
		eachRelation isSourceNavigable ifTrue: [
			eachRelation targetMultiplicity hasMultipleInstances 
				ifTrue: [aWriteStream nextPutAll: targetAttribute getName,' := OrderedCollection new.', String lineDelimiter] 
				ifFalse: [aWriteStream nextPutAll: targetAttribute getName,' := ', (targetAttribute getInitializeTypeFor: self) name, ' new.', String lineDelimiter]. ].].
!

appendDateAttributesOn: aWriteStream
	"The receiver append instances variables of date values to method code <aWriteStream>"

	(self attributes select: [:eachAttr | eachAttr type name = 'Date']) asOrderedCollection do: [:each | 
		aWriteStream nextPutAll: each getName,' := Date new.', String lineDelimiter. "instances variables assigment for dates"
	].!

appendNtoXrelationsOn: aWriteStream
	"The receiver append instances variables of N to X (1 or N) relations (collections) to method code <aWriteStream>"

	 (self attributes select: [:each | each hasMultipleInstances not and:[each relationIsOneToManyOrManyToOne]]) asOrderedCollection do: [:each | 
		aWriteStream nextPutAll: each getName,' := ', each getType name ,' new.', String lineDelimiter.
	].

	 (self attributes select: [:each | each hasMultipleInstances]) asOrderedCollection do: [:each | 
		aWriteStream nextPutAll: each getName,' := OrderedCollection new.', String lineDelimiter.  "instances variables assigment for collections"
	].!

appendNumberAttributesOn: aWriteStream
	"The receiver append instances variables of number values to method code <aWriteStream>"

	(self attributes select: [:eachAttr | eachAttr type name = 'Number']) asOrderedCollection do: [:each | 
		aWriteStream nextPutAll: each getName,' := 0.', String lineDelimiter. "instances variables assigment for numbers"
	].!

appendOneToOneRelationsOn: aWriteStream overflowCollection: overflowCollection
	"The receiver append instances variables of one to one relations (domain objects) to method code <aWriteStream>"
	| basicValues selectedAttributes |

	overflowCollection add: self.

	basicValues := #('Boolean' 'True' 'False' 'Number' 'String' 'Time' 'TimeStamp' 'Date').

	selectedAttributes := (self attributes reject: [:each | (overflowCollection includes: each type) "infinite loop detected" or: 
										[(basicValues includes: each type name) or: 
										[each relationIsOneToOne not or: 
										[each isSelfReferenceAttribute]]]]) asOrderedCollection.

	(selectedAttributes reject: [:each | each type == virtualMachine nilObjectClass]) do: [:classAttribute | | newMethodName |
		newMethodName := ' newFrom', name,': self.'.
		aWriteStream nextPutAll: classAttribute getName,' := ', (classAttribute getInitializeTypeFor: self) name, newMethodName, String lineDelimiter. "instances variables assigment for domain objects"
		classAttribute getType metaclass compileNewFromMethodFor: self triggerAttribute: classAttribute.
		classAttribute getType autoGenerateInitializeMethodIn: self defaultVirtualMachine overflowCollection: overflowCollection.
	].

	(selectedAttributes select: [:each | each type == virtualMachine nilObjectClass]) do: [:classAttribute | 
		aWriteStream nextPutAll: classAttribute getName, ' := nil. "error: mismatch type mapping for this variable" '
	].!

appendStringAttributesOn: aWriteStream
	"The receiver append instances variables of string values to method code <aWriteStream>"

	(self attributes select: [:eachAttr | eachAttr type name = 'String']) asOrderedCollection do: [:each | 
		aWriteStream nextPutAll: each getName,' := ''''.', String lineDelimiter. "instances variables assigment for strings"
	].!

appendSuperInitializeOn: aWriteStream
	"The receiver append the method signature 'initialize' and 'super initialize' to method code <aWriteStream>"

	aWriteStream nextPutAll:  'initialize', String lineDelimiter, String lineDelimiter;
		nextPutAll:  'super initialize.', String lineDelimiter. !

appendTimeAttributesOn: aWriteStream
	"The receiver append instances variables of time values to method code <aWriteStream>"

	(self attributes select: [:eachAttr | eachAttr type name = 'Time']) asOrderedCollection do: [:each | 
		aWriteStream nextPutAll: each getName,' := Time new.', String lineDelimiter. "instances variables assigment for time "
	].!

appendTimeStampAttributesOn: aWriteStream
	"The receiver append instances variables of time stamp values to method code <aWriteStream>"

	(self attributes select: [:eachAttr | eachAttr type name = 'TimeStamp']) asOrderedCollection do: [:each | 
		aWriteStream nextPutAll: each getName,' := TimeStamp new.', String lineDelimiter. "instances variables assigment for time stamps"
	].!

autoGenerateInitializeMethodIn: anUMLVirtualMachine
	"The receiver create a String that represent each assgiment of it's instances variables, then the Compiler compile the contents of <WriteStream><initializeStream> to obtaind the parsed method "

	^self autoGenerateInitializeMethodIn: anUMLVirtualMachine overflowCollection: OrderedCollection new!

autoGenerateInitializeMethodIn: anUMLVirtualMachine overflowCollection: overflowCollection
	"The receiver create a String that represent each assgiment of it's instances variables, then the Compiler compile the contents of <WriteStream><initializeStream> to obtaind the parsed method "
	| initializeStream |

	initializeStream := WriteStream on: String new.

	self appendSuperInitializeOn: initializeStream.
	self appendStringAttributesOn: initializeStream.
	self appendNumberAttributesOn: initializeStream.
	self appendBooleanAttributesOn: initializeStream.
	self appendTimeStampAttributesOn: initializeStream.
	self appendDateAttributesOn: initializeStream.
	self appendTimeAttributesOn: initializeStream.
	self appendClassSelfReferencesOn: initializeStream.
	self appendOneToOneRelationsOn: initializeStream overflowCollection: overflowCollection.
	self appendNtoXrelationsOn: initializeStream.

	self addSourceImplementation: initializeStream contents!

createClassAccessorsForGlobalObject: anUMLInstance using: varName
	| source |

	source := self createUMLAccessorsSourceFor: anUMLInstance using: varName.
	^self getMetaclass addSourceImplementation: source!

createClassAccessorsForGlobalObjectsUsing: varName
	| source |

	self myRootObjects do: [:each | 
		source := self createUMLAccessorsSourceFor: each using: varName.
		^self getMetaclass addSourceImplementation: source].!

createClassCreationMethodForGlobalObject: anUMLInstance using: varName
	| source |

	source := self createUMLCreationSourceFor: anUMLInstance using: varName.

	^self getMetaclass addSourceImplementation: source!

createClassCreationMethodsForGlobalObjectsUsing: aSymbol 
	| newImplementation source methodsName |

	methodsName := OrderedCollection new.
	self myRootObjects do: [:each | 
		source := self createUMLCreationSourceFor: each using: aSymbol.
		newImplementation := self getMetaclass addSourceImplementation: source.
		methodsName add: newImplementation methodName.
	].

	source := self createUMLSourceForCreateAllInstancesWith: methodsName.
	self getMetaclass addSourceImplementation: source.!

createClassDBAccessorsForGlobalObjectsUsing: varName
	| source |

	self myRootObjects do: [:each | 
		source := self createUMLDBAccessorsSourceFor: each using: varName.
		self getMetaclass addSourceImplementation: source.
	].!

createClassDBCreationMethodsForGlobalObjectsUsing: aSymbol 
	| newImplementation source methodsName |

	methodsName := OrderedCollection new.
	self myRootObjects do: [:each | 
		source := self createUMLDBCreationSourceFor: each using: aSymbol.
		newImplementation := self getMetaclass addSourceImplementation: source.
		methodsName add: newImplementation methodName.
		newImplementation].

	source := self createUMLDBSourceForCreateAllInstancesWith: methodsName.
	self getMetaclass addSourceImplementation: source.!

createUMLAccessorsSourceFor: anUMLInstance using: varName
	| instanceValue |

	instanceValue := (anUMLInstance vmPerform: varName) smalltalkObject trimBlanks.
	^instanceValue asUMLInstVarName, String lineDelimiter, String tab, 
		'^', self getMetaclass name, ' getFirstGlobalObjectSatisfying: [:each | each ', varName , ' = ''',  instanceValue , '''] ifNone: []'.!

createUMLCreationSourceFor: anUMLInstance using: varName
	| source instanceValue smalltalkObject |

	smalltalkObject := (anUMLInstance vmPerform: varName) smalltalkObject. 
	instanceValue :=  smalltalkObject isString ifTrue: [smalltalkObject trimBlanks] ifFalse: [smalltalkObject printString].
	source  := '_create', instanceValue capitalized, String lineDelimiter, String tab, 
		'| newInstance | ', String lineDelimiter, String tab, 
		'newInstance := ', self getMetaclass name, ' new.', String lineDelimiter, String tab.
	anUMLInstance basicInstancesVariables keysAndValuesDo: [:eachKey :eachVMI | 
		source := source, 'newInstance ', eachKey, ': ', eachVMI smalltalkObject printString, '.',String lineDelimiter, String tab. ].

	source := source, String lineDelimiter, String tab, 'newInstance storeAsGlobalObject.', String lineDelimiter, String tab, '^newInstance'.

	^source!

createUMLDBAccessorsSourceFor: anUMLInstance using: varName
	| instanceValue |

	instanceValue := (anUMLInstance vmPerform: varName) smalltalkObject trimBlanks.
	^instanceValue asUMLInstVarName, 'In: aBBReStoreSession', String lineDelimiter, String tab, 
		'^', self getMetaclass name, ' getFirstGlobalObjectSatisfying: [:each | each ', varName , ' = ''',  instanceValue , '''] ifNone: [] on: aBBReStoreSession'.!

createUMLDBCreationSourceFor: anUMLInstance using: varName
	| source instanceValue smalltalkObject |

	smalltalkObject := (anUMLInstance vmPerform: varName) smalltalkObject. 
	instanceValue :=  (smalltalkObject class == String) ifTrue: [smalltalkObject trimBlanks] ifFalse: [smalltalkObject printString].
	source  := '_create', instanceValue capitalized, 'In: aBBReStoreSession ', String lineDelimiter, String tab, 
		'| newInstance | ', String lineDelimiter, String tab, 
		'newInstance := ', self getMetaclass name, ' new.', String lineDelimiter, String tab.
	anUMLInstance basicInstancesVariables keysAndValuesDo: [:eachKey :eachVMI | 
		source := source, 'newInstance ', eachKey, ': ', eachVMI smalltalkObject printString, '.',String lineDelimiter, String tab. ].

	source := source, String lineDelimiter, String tab, 'newInstance storeAsGlobalObjectIn: aBBReStoreSession.', String lineDelimiter, String tab, '^newInstance'.

	^source!

createUMLDBSourceForCreateAllInstancesWith: anOrderedCollection
	| source |

	source := '_initialInstancesIn: aBBReStoreSession
	^OrderedCollection new', String lineDelimiter, String tab.
	anOrderedCollection do: [:each | source  := source, String tab, 'add: (self ', each, ' aBBReStoreSession);', String lineDelimiter, String tab].

	^source, String lineDelimiter, String tab, String tab,'yourself'!

createUMLSourceForCreateAllInstancesWith: anOrderedCollection
	| source |

	source := '_initialInstances
	^OrderedCollection new', String lineDelimiter, String tab.
	anOrderedCollection do: [:each | source  := source, String tab, 'add: self ', each, ';', String lineDelimiter, String tab].

	^source, String lineDelimiter, String tab, String tab,'yourself'! !
!UMLClass categoriesFor: #appendBooleanAttributesOn:!initialize generation!public! !
!UMLClass categoriesFor: #appendClassSelfReferencesOn:!initialize generation!public! !
!UMLClass categoriesFor: #appendDateAttributesOn:!initialize generation!public! !
!UMLClass categoriesFor: #appendNtoXrelationsOn:!initialize generation!public! !
!UMLClass categoriesFor: #appendNumberAttributesOn:!initialize generation!public! !
!UMLClass categoriesFor: #appendOneToOneRelationsOn:overflowCollection:!initialize generation!public! !
!UMLClass categoriesFor: #appendStringAttributesOn:!initialize generation!public! !
!UMLClass categoriesFor: #appendSuperInitializeOn:!initialize generation!public! !
!UMLClass categoriesFor: #appendTimeAttributesOn:!initialize generation!public! !
!UMLClass categoriesFor: #appendTimeStampAttributesOn:!initialize generation!public! !
!UMLClass categoriesFor: #autoGenerateInitializeMethodIn:!initialize generation!public! !
!UMLClass categoriesFor: #autoGenerateInitializeMethodIn:overflowCollection:!initialize generation!public! !
!UMLClass categoriesFor: #createClassAccessorsForGlobalObject:using:!public! !
!UMLClass categoriesFor: #createClassAccessorsForGlobalObjectsUsing:!public! !
!UMLClass categoriesFor: #createClassCreationMethodForGlobalObject:using:!public! !
!UMLClass categoriesFor: #createClassCreationMethodsForGlobalObjectsUsing:!public! !
!UMLClass categoriesFor: #createClassDBAccessorsForGlobalObjectsUsing:!public! !
!UMLClass categoriesFor: #createClassDBCreationMethodsForGlobalObjectsUsing:!public! !
!UMLClass categoriesFor: #createUMLAccessorsSourceFor:using:!public! !
!UMLClass categoriesFor: #createUMLCreationSourceFor:using:!public! !
!UMLClass categoriesFor: #createUMLDBAccessorsSourceFor:using:!public! !
!UMLClass categoriesFor: #createUMLDBCreationSourceFor:using:!public! !
!UMLClass categoriesFor: #createUMLDBSourceForCreateAllInstancesWith:!public! !
!UMLClass categoriesFor: #createUMLSourceForCreateAllInstancesWith:!public! !

!UMLObject methodsFor!

umlCompiler

	^self class umlCompiler! !
!UMLObject categoriesFor: #umlCompiler!public! !

!UMLObject class methodsFor!

umlCompiler

	^UMLCompiler! !
!UMLObject class categoriesFor: #umlCompiler!public! !

"End of package definition"!

